{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1uU0LEWC9fX26uzGMKnpXE6BXHHORcRGz",
      "authorship_tag": "ABX9TyOyB7+XVHqStR657hw/etms",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GVSLPavani/sentimental-analysis/blob/main/sentimental%20analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 924
        },
        "id": "vzvsFLk8rSCz",
        "outputId": "fd83c842-bb6a-4e78-ff51-ddc1fa285230"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive/; to attempt to forcibly remount, call drive.mount(\"/content/drive/\", force_remount=True).\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-------scores--------\n",
            "Accuracy score is : 76.5%\n",
            "precision_score is : 76.42%\n",
            "recall_score is : 78.64%\n",
            "Accuracy score for alpha = 0.1 is : 78.0%\n",
            "Accuracy score for alpha = 0.2 is : 78.5%\n",
            "Accuracy score for alpha = 0.3 is : 78.0%\n",
            "Accuracy score for alpha = 0.4 is : 78.0%\n",
            "Accuracy score for alpha = 0.5 is : 77.5%\n",
            "Accuracy score for alpha = 0.6 is : 77.5%\n",
            "Accuracy score for alpha = 0.7 is : 77.5%\n",
            "Accuracy score for alpha = 0.8 is : 77.0%\n",
            "Accuracy score for alpha = 0.9 is : 76.5%\n",
            "Accuracy score for alpha = 1.0 is : 76.5%\n",
            "-------------------------------------------\n",
            "The best accuracy is 78.5% with alpha value as 0.2\n",
            "This is a POSITIVE review\n",
            "This is Negative review!\n",
            "This is a POSITIVE review\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import numpy as np       #linear algebra\n",
        "import pandas as pd      #data processing ,csv file I/o\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive/')  #connecting google drive with google colab\n",
        "#loading the data\n",
        "df = pd.read_csv('/content/drive/MyDrive/Restaurant_Reviews.csv')\n",
        "df.shape\n",
        "df.head(10)\n",
        "df.columns\n",
        "df.info\n",
        "#Importing essential libraries for performing natural language processing on restaurant review dataset\n",
        "\n",
        "import nltk              #natural language toolkit,is a python package that you can use for NLP\n",
        "import re            #python has inbuilt packagr called re, which can use to work with regular expressions\n",
        "nltk.download('stopwords')   #the NLTK corpus is a massive dump of all kinds of natural language data sets that are definently worth taking a look at\n",
        "from nltk.corpus import stopwords    #A stop is a commonly used word (such as \"the\",\"a\",\"an\",\"in\") that a search engine has been programmed to ignore\n",
        "from nltk.stem.porter import PorterStemmer   # Porters stemmer it is a stemmer which is mainly known for data mining and information retrival\n",
        "#cleaning the reviews\n",
        "\n",
        "corpus = []\n",
        "for i in range(0,1000):\n",
        "\n",
        "  #1000 records\n",
        "  #cleaning special character from the reviews\n",
        "  #the re.sub() method performs global search and global replace on the given data\n",
        "    review = re.sub(pattern='[^a-zA-Z]', repl=' ', string=str(df['Review'][i]))\n",
        "\n",
        "    #convering the entire review into lowercase\n",
        "    review = review.lower()\n",
        "\n",
        "    #Tokenizing the review by words\n",
        "    review_words = review.split()\n",
        "\n",
        "    #removing the stop words\n",
        "    review_words = [word for word in review_words if not word in set(stopwords.words('english'))]    #stopwords are the english wordswhich doesn't add much meaning to a sentence\n",
        "\n",
        "      #streaming the stop words\n",
        "    ps = PorterStemmer()\n",
        "    review = [ps.stem(word) for word in review_words]\n",
        "\n",
        "    #joining the stemmed words\n",
        "    review = ' '.join(review)\n",
        "\n",
        "   #creating a corpus\n",
        "    corpus.append(review)\n",
        "    corpus[0:1500]\n",
        "    #creating the bags of words model\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "cv = CountVectorizer(max_features=1500)  #max_features = 1500\n",
        "X = cv.fit_transform(corpus).toarray()\n",
        "y = df.iloc[:,1].values\n",
        "from sklearn.model_selection import train_test_split   #used to test the data into training data and test data\n",
        "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.20,random_state = 0)\n",
        "\n",
        "#random_state simply sets seed to the random generator, so that your train-test splits are always deterministic. if you dont set seed, it is difficult to each time\n",
        "\n",
        "#Training (1000,1500)\n",
        "#1000 * 80/100 = 800\n",
        "#1000 * 20/100 = 200\n",
        "X_train.shape,X_test.shape,y_train.shape,y_test.shape\n",
        "#Fitting Naive Bayes to the Training set\n",
        "\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "# the multinomial Naive Bayes classifier is suitable for classification with discrete features(e.g., word counts for text classification).\n",
        "\n",
        "classifier = MultinomialNB()\n",
        "classifier.fit(X_train,y_train)  #fit training data\n",
        "# Predicting the Test set results\n",
        "y_pred = classifier.predict(X_test)\n",
        "y_test\n",
        "#Accuracy,Prediction and Recall\n",
        "\n",
        "from sklearn.metrics import accuracy_score\n",
        "#in python, the accuracy_score function of the sklearn. metrics package calculates the accuracy the accuracy score for a set of predicted labels against the true labels.\n",
        "\n",
        "from sklearn.metrics import precision_score\n",
        "\n",
        "from sklearn.metrics import recall_score\n",
        "\n",
        "score1 = accuracy_score(y_test,y_pred)\n",
        "score2 = precision_score(y_test,y_pred)\n",
        "score3 = recall_score(y_test,y_pred)\n",
        "\n",
        "print(\"-------scores--------\")\n",
        "print(\"Accuracy score is : {}%\".format(round(score1*100,2)))\n",
        "print(\"precision_score is : {}%\".format(round(score2*100,2)))\n",
        "print(\"recall_score is : {}%\".format(round(score3*100,2)))\n",
        "#making the confusion matrix\n",
        "#A confusion matrix is table that is used to define the performance of a classification algorithm.\n",
        "#A confusion matrix visualizes and summarizes the performance of a classification\n",
        "\n",
        "from sklearn.metrics import confusion_matrix\n",
        "cm = confusion_matrix(y_test,y_pred)\n",
        "\n",
        "cm\n",
        "#plotting the confusion matrix\n",
        "\n",
        "import matplotlib.pyplot as plt   #matplotlib is a low level graph plotting library in python that servs as a visualization utility\n",
        "import seaborn as sns    #seaborn is python data visualization library based on matplotlib\n",
        "%matplotlib inline\n",
        "\n",
        "plt.figure(figsize = (10,6))\n",
        "sns.heatmap(cm,annot=True,cmap=\"YlGnBu\",xticklabels=[\"Negative\",\"positive\"],yticklabels=['Negative','Positive'])\n",
        "plt.xlabel('Predicted values')\n",
        "plt.ylabel('Actual values')\n",
        "# Hyperparameter tuning the Naive Bayes Classifier\n",
        "best_accuracy = 0.0\n",
        "alpha_val = 0.0\n",
        "for i in np.arange(0.1,1.1,0.1):\n",
        "  temp_classifier = MultinomialNB(alpha=i)\n",
        "  temp_classifier.fit(X_train,y_train)\n",
        "  temp_y_pred = temp_classifier.predict(X_test)\n",
        "  score = accuracy_score(y_test,temp_y_pred)\n",
        "  print(\"Accuracy score for alpha = {} is : {}%\".format(round(i,1),round(score*100,2)))\n",
        "  if score>best_accuracy:\n",
        "    best_accuracy = score\n",
        "    alpha_val = i\n",
        "print(\"-------------------------------------------\")\n",
        "print('The best accuracy is {}% with alpha value as {}'.format(round(best_accuracy*100,2),round(alpha_val,1)))\n",
        "classifier = MultinomialNB(alpha = 0.2)\n",
        "classifier.fit(X_train,y_train)\n",
        "def predict_sentiment(sample_review):\n",
        "  sample_review = re.sub(pattern = '[^a-zA-Z]',repl=' ',string = sample_review)\n",
        "  sample_review =sample_review.lower()\n",
        "  sample_review_words = sample_review.split()\n",
        "  sample_review_words = [word for word in sample_review_words if not word in set(stopwords.words('english'))]\n",
        "  ps=PorterStemmer()\n",
        "  final_review = [ps.stem(word) for word in sample_review_words]\n",
        "  final_review = ' '.join(final_review)\n",
        "\n",
        "  temp = cv.transform([final_review]).toarray()\n",
        "  return classifier.predict(temp)\n",
        "  #Predicted values\n",
        "sample_review = 'The food is very very good'\n",
        "\n",
        "if predict_sentiment(sample_review):\n",
        "  print('This is a POSITIVE review')\n",
        "else:\n",
        "  print('This is Negative review!')\n",
        "  #Predicted values\n",
        "sample_review = 'The food pretty bad and the service was very slow'\n",
        "\n",
        "if predict_sentiment(sample_review):\n",
        "  print('This is a POSITIVE review')\n",
        "else:\n",
        "  print('This is Negative review!')\n",
        "  #Predicted values\n",
        "sample_review = 'The food was absolutely wonderful, from preparation to presentation,very pleasing.'\n",
        "\n",
        "if predict_sentiment(sample_review):\n",
        "  print('This is a POSITIVE review')\n",
        "else:\n",
        "  print('This is Negative review!')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "2TXNJyiirWKs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "629dc23b-b0d0-40e4-e890-04494463baf2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    }
  ]
}